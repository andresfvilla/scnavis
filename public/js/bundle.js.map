{"version":3,"sources":["node_modules/browser-pack/_prelude.js","client/App/App.js","client/EditProfile/EditProfile.js","client/EditProfile/EditProfileActions.js","client/EditProfile/EditProfileStore.js","client/Footer/Footer.js","client/Footer/FooterActions.js","client/Footer/FooterStore.js","client/Home/Home.js","client/Home/HomeActions.js","client/Home/HomeStore.js","client/Login/Login.js","client/Login/LoginActions.js","client/Login/LoginStore.js","client/Navbar/Navbar.js","client/Navbar/NavbarActions.js","client/Navbar/NavbarStore.js","client/NotFoundPage/NotFoundPage.js","client/Profile/Profile.js","client/Profile/ProfileActions.js","client/Profile/ProfileStore.js","client/Signup/Signup.js","client/Signup/SignupActions.js","client/Signup/SignupStore.js","client/UserList/UserList.js","client/UserList/UserListActions.js","client/UserList/UserListStore.js","client/alt.js","client/main.js","client/routes.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/process/browser.js","node_modules/react-dropzone/dist/index.js","node_modules/superagent/lib/client.js","node_modules/superagent/lib/is-function.js","node_modules/superagent/lib/is-object.js","node_modules/superagent/lib/request-base.js","node_modules/superagent/lib/response-base.js","node_modules/superagent/lib/should-retry.js","node_modules/superagent/lib/utils.js","node_modules/superagent/node_modules/component-emitter/index.js","node_modules/warning/browser.js"],"names":[],"mappings":"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AFF;AAGE,wDAAO,MAAK,UAAZ,EAAuB,4BAAvB,GAHF;AAIE,wDAAO,MAAK,SAAZ,EAAsB,2BAAtB,GAJF;AAKE,wDAAO,MAAK,QAAZ,EAAqB,0BAArB,GALF;AAME,wDAAO,MAAK,eAAZ,EAA4B,gCAA5B,GANF;AAOE,wDAAO,MAAK,GAAZ,EAAgB,iCAAhB;AAPF;AADF,C;;;ACZF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnpjjr6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbkrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import React from 'react';\nimport Footer from '../Footer/Footer';\nimport Navbar from '../Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar history={this.props.history} />\n        {this.props.children}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {Link} from 'react-router';\nimport Dropzone from 'react-dropzone';\nimport request from 'superagent';\nimport {isEqual} from 'underscore';\nimport EditProfileStore from './EditProfileStore';\nimport EditProfileActions from './EditProfileActions';\n\nclass EditProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = EditProfileStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    EditProfileStore.listen(this.onChange);\n    EditProfileActions.getProfile();\n\n    // $('.magnific-popup').magnificPopup({\n    //   type: 'image',\n    //   mainClass: 'mfp-zoom-in',\n    //   closeOnContentClick: true,\n    //   midClick: true,\n    //   zoom: {\n    //     enabled: true,\n    //     duration: 300\n    //   }\n    // });\n  }\n\n  componentWillUnmount() {\n    EditProfileStore.unlisten(this.onChange);\n    $(document.body).removeClass();\n  }\n\n  componentDidUpdate(prevProps) {\n\n    if (prevProps.params.id !== this.props.params.id) {\n      EditProfileActions.getProfile();\n    }\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleGeneralSubmit(event) {\n    event.preventDefault();\n\n    var email = this.state.email.trim();\n    var displayName = this.state.displayName.trim();\n\n    if (email && displayName ) {\n\n      var data = {};\n      data.email = email\n      data.displayName = displayName\n      data.id = this.state.id\n      EditProfileActions.updateProfile(data);\n    }\n  }\n\n  handlePasswordSubmit(event) {\n    event.preventDefault();\n\n    const oldPassword = this.state.oldPassword;\n    const newPassword = this.state.newPassword;\n\n    if (oldPassword !== newPassword) {\n      EditProfileActions.invalidEditProfile();\n    }\n  }\n\n  handleTeamsSubmit(event) {\n    event.preventDefault();\n\n    var email = this.state.email.trim();\n    var displayName = this.state.displayName.trim();\n\n    var password = this.state.password.trim();\n\n    if (!email || !displayName || !password) {\n      EditProfileActions.invalidEditProfile();\n    }\n\n    if (email && displayName && password) {\n      EditProfileActions.addUser(email, displayName, password);\n    }\n  }\n\n  onImageDrop(files){\n    this.state.uploadedFile = files[0]\n    console.log(files)\n    EditProfileActions.uploadImage(files[0]);\n  }\n\n  render() {\n      return (\n        <div className='container'>\n          <div className='row'>\n            <div className='col-sm-8 col-md-offset-2'>\n              <div className='panel panel-default'>\n                <div className='panel-heading'>Profile Picture</div>\n                <div className='panel-body'>\n                  <form onSubmit={this.handleGeneralSubmit.bind(this)}>\n                    <div className='profile-img'>\n                      <a ref='magnificPopup' className='magnific-popup' href={'/api/profilepicture/' + this.state.profilePicture}>\n                        <img className='media-object' src={'/api/profilepicture/'+this.state.profilePicture} />\n                      </a>\n                    </div>\n                    <div className='FileUpload'>\n                      <Dropzone\n                        multiple={false}\n                        accept=\"image/*\"\n                        onDrop={this.onImageDrop.bind(this)}>\n                        <p>Drop an image or click to select a file to upload.</p>\n                      </Dropzone>\n                    </div>\n                    <button type='submit' className='btn btn-primary'>Submit</button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-sm-8 col-md-offset-2'>\n              <div className='panel panel-default'>\n                <div className='panel-heading'>General Info</div>\n                <div className='panel-body'>\n                  <form onSubmit={this.handleGeneralSubmit.bind(this)}>\n                    <div className={'form-group ' + this.state.emailValidationState}>\n                      <label className='control-label center-block'>Email</label>\n                      <input type='text' className='form-control' ref='emailTextField' value={this.state.email}\n                             onChange={EditProfileActions.updateEmail} autoFocus/>\n                    </div>\n                    <div className={'form-group ' + this.state.displayNameValidationState}>\n                      <label className='control-label'>Display Name</label>\n                      <input type='text' className='form-control' ref='displayNameTextField' value={this.state.displayName}\n                             onChange={EditProfileActions.updateDisplayName} autoFocus/>\n                    </div>\n                    <button type='submit' className='btn btn-primary'>Submit</button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-sm-8 col-md-offset-2'>\n              <div className='panel panel-default'>\n                <div className='panel-heading'>Change Password</div>\n                <div className='panel-body'>\n                  <form onSubmit={this.handlePasswordSubmit.bind(this)}>\n                    <div className={'form-group ' + this.state.displayNameValidationState}>\n                      <label className='control-label'>Old Password</label>\n                      <input type='password' className='form-control' ref='passwordTextField' value={this.state.password}\n                             onChange={EditProfileActions.updateOldPassword} autoFocus/>\n                    </div>\n                    <div className={'form-group ' + this.state.passwordValidationState}>\n                      <label className='control-label'>New Password</label>\n                      <input type='password' className='form-control' ref='passwordTextField' value={this.state.password}\n                             onChange={EditProfileActions.updateNewPassword} autoFocus/>\n                    </div>\n                    <div className={'form-group ' + this.state.passwordValidationState}>\n                      <label className='control-label'>Confirm New Password</label>\n                      <input type='password' className='form-control' ref='passwordTextField' value={this.state.password}\n                             onChange={EditProfileActions.updateConfirmPassword} autoFocus/>\n                    </div>\n                    <button type='submit' className='btn btn-primary'>Submit</button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      );\n  }\n}\n\nexport default EditProfile;\n","import alt from '../alt';\n\nclass EditProfileActions {\n  constructor() {\n    this.generateActions(\n      'getProfileSuccess',\n      'getProfileFail',\n      'updateDisplayName',\n      'updateOldPassword',\n      'updateNewPassword',\n      'updateEmail',\n      'updateProfileSuccess',\n      'updateProfileFail',\n      'uploadImageSuccess',\n      'uploadImageFail'\n    );\n  }\n\n  uploadImage(file){\n    $.ajax({\n      type: 'POST',\n      url: '/api/image',\n      data: file.value\n    })\n      .done((data) => {\n        this.actions.uploadImageSuccess(data);\n      })\n      .fail((jqXhr) => {\n        this.actions.uploadImageFail(jqXhr.responseJSON.message);\n      });\n  }\n\n  updateProfile(profileData) {\n    $.ajax({\n      type: 'PUT',\n      url: '/api/profile/' + profileData.id,\n      data: profileData\n    })\n      .done((data) => {\n        this.actions.updateProfileSuccess(data);\n      })\n      .fail((jqXhr) => {\n        this.actions.updateProfileFail(jqXhr.responseJSON.message);\n      });\n  }\n\n  getProfile() {\n    $.ajax({ url: '/api/profile'})\n      .done((data) => {\n        this.actions.getProfileSuccess(data);\n      })\n      .fail((jqXhr) => {\n        this.actions.getProfileFail(jqXhr);\n      })\n  }\n}\n\nexport default alt.createActions(EditProfileActions);\n","import {assign, contains} from 'underscore';\nimport alt from '../alt';\nimport EditProfileActions from './EditProfileActions';\n\nclass EditProfileStore {\n  constructor() {\n    this.bindActions(EditProfileActions);\n    this.id = 0;\n    this.email = '';\n    this.displayName = '';\n    this.profilePicture = '';\n    this.organization = [];\n    this.oldPassword = '';\n    this.newPassword = '';\n    this.uploadedFile = []\n  }\n\n  onUpdateEmail(event) {\n    this.email = event.target.value;\n  }\n\n  onUpdateDisplayName(event) {\n    this.displayName = event.target.value;\n  }\n\n  onUpdateOldPassword(event) {\n    this.oldPassword = event.target.value;\n  }\n\n  onUpdateNewPassword(event) {\n    this.newPassword = event.target.value;\n  }\n\n  onUpdateConfirmPassword(event) {\n    this.newPassword = event.target.value;\n  }\n\n  onGetProfileSuccess(data) {\n    this.email = data.local.email\n    this.displayName = data.local.displayName\n    this.profilePicture = data.local.profilePicture\n    this.organization = data.local.organization;\n    this.id = data._id\n  }\n\n  onGetProfileFail(jqXhr) {\n    toastr.error(jqXhr.responseJSON.message);\n  }\n\n  onUpdateProfileSuccess(data){\n    this.email = data.local.email\n    this.displayName = data.local.displayName\n    this.profilePicture = data.local.profilePicture\n    this.organization = data.local.organization;\n    this.id = data._id\n    window.location.reload()\n  }\n\n  onUpdateProfileFail(jqXhr){\n    console.log('testing the fail');\n  }\n\n  onUploadImageSuccess(data){\n    console.log(\"testing\")\n    EditProfileActions.updateProfile(data);\n  }\n\n  onUploadImageFail(jqXhr){\n    console.log('testing the fail');\n  }\n\n}\n\nexport default alt.createStore(EditProfileStore);\n","import React from 'react';\nimport {Link} from 'react-router';\nimport FooterStore from './FooterStore'\nimport FooterActions from './FooterActions';\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = FooterStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    FooterStore.listen(this.onChange);\n    FooterActions.getTopCharacters();\n  }\n\n  componentWillUnmount() {\n    FooterStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <footer>\n        <div className='container'>\n          <div className='row'>\n            <div className='col-sm-5'>\n              <h3 className='lead'><strong>SCNAVIS</strong></h3>\n              <p>Tournament organizer. Come challenge friends.</p>\n              <p>what else should i put?</p>\n              <p>© 2017 Andres Villa.</p>\n            </div>\n          </div>\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import alt from '../alt';\n\nclass FooterActions {\n  constructor() {\n    this.generateActions(\n      'getTopCharactersSuccess',\n      'getTopCharactersFail'\n    );\n  }\n\n  getTopCharacters() {\n    $.ajax({ url: '/api/characters/top' })\n      .done((data) => {\n        this.actions.getTopCharactersSuccess(data)\n      })\n      .fail((jqXhr) => {\n        this.actions.getTopCharactersFail(jqXhr)\n      });\n  }\n}\n\nexport default alt.createActions(FooterActions);\n","import alt from '../alt';\nimport FooterActions from './FooterActions';\n\nclass FooterStore {\n  constructor() {\n    this.bindActions(FooterActions);\n    this.characters = [];\n  }\n\n  onGetTopCharactersSuccess(data) {\n    this.characters = data.slice(0, 5);\n  }\n\n  onGetTopCharactersFail(jqXhr) {\n    // Handle multiple response formats, fallback to HTTP status code number.\n    toastr.error(jqXhr.responseJSON && jqXhr.responseJSON.message || jqXhr.responseText || jqXhr.statusText);\n  }\n}\n\nexport default alt.createStore(FooterStore);\n","import React from 'react';\nimport {Link} from 'react-router';\nimport HomeStore from './HomeStore'\nimport HomeActions from './HomeActions';\nimport {first, without, findWhere} from 'underscore';\n\nvar LogoStars = '../img/logo_stars.png';\n\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = HomeStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    HomeStore.listen(this.onChange);\n  }\n\n  componentWillUnmount() {\n    HomeStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <h3 className='text-center'>SCNAVIS.</h3>\n        <img className='center-block' width=\"80%\" height=\"auto\"  src={LogoStars} />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import alt from '../alt';\n\nclass HomeActions {\n  constructor() {\n    this.generateActions(\n      'getTwoCharactersSuccess',\n      'getTwoCharactersFail',\n      'voteFail'\n    );\n  }\n}\n\nexport default alt.createActions(HomeActions);\n","import alt from '../alt';\nimport HomeActions from './HomeActions';\n\nclass HomeStore {\n  constructor() {\n    this.bindActions(HomeActions);\n  }\n}\n\nexport default alt.createStore(HomeStore);\n","import React from 'react';\nimport LoginStore from './LoginStore';\nimport LoginActions from './LoginActions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = LoginStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    LoginStore.listen(this.onChange);\n  }\n\n  componentWillUnmount() {\n    LoginStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    var email = this.state.email.trim();\n    var password = this.state.password.trim();\n\n    if (!email || !password) {\n      LoginActions.invalidLogin();\n      //this.refs.nameTextField.getDOMNode().focus();\n    }\n\n    if (email && password) {\n      console.log(email + \" password:\" +  password);\n      LoginActions.login(email, password);\n    }\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='row'>\n          <div className='col-sm-8 col-md-offset-2'>\n            <div className='panel panel-default'>\n              <div className='panel-heading'>Login</div>\n              <div className='panel-body'>\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                  <div className={'form-group ' + this.state.emailValidationState}>\n                    <label className='control-label'>Email</label>\n                    <input type='text' className='form-control' ref='emailTextField' value={this.state.email}\n                           onChange={LoginActions.updateEmail} autoFocus/>\n                    <span className='help-block'>{this.state.helpBlock}</span>\n                  </div>\n                  <div className={'form-group ' + this.state.passwordValidationState}>\n                    <label className='control-label'>Password</label>\n                    <input type='password' className='form-control' ref='passwordTextField' value={this.state.password}\n                           onChange={LoginActions.updatePassword} autoFocus/>\n                    <span className='help-block'>{this.state.helpBlock}</span>\n                  </div>\n                  <button type='submit' className='btn btn-primary align-right'>Submit</button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import alt from '../alt';\n\nclass LoginActions {\n  constructor() {\n    this.generateActions(\n      'loginSuccess',\n      'loginFail',\n      'updateDisplayName',\n      'updatePassword',\n      'updateEmail',\n      'invalidDisplayName',\n      'invalidPassword',\n      'invalidEmail',\n    );\n  }\n\n  login(email, password) {\n    $.ajax({\n      type: 'POST',\n      url: '/api/login',\n      data: { email: email, password: password}\n    })\n      .done((data) => {\n        this.actions.loginSuccess(data.message);\n      })\n      .fail((jqXhr) => {\n        this.actions.loginFail(jqXhr.responseJSON.message);\n      });\n  }\n}\n\nexport default alt.createActions(LoginActions);\n","import alt from '../alt';\nimport LoginActions from './LoginActions';\n\nclass LoginStore {\n  constructor() {\n    this.bindActions(LoginActions);\n    this.email = '';\n    this.password = '';\n    this.helpBlock = '';\n    this.emailValidationState = '';\n    this.passwordValidationState = '';\n  }\n\n  onLoginSuccess(successMessage) {\n    window.location.replace(\"/profile\");\n    this.displayNameValidationState = 'has-success';\n    this.helpBlock = successMessage;\n  }\n\n  onLoginFail(errorMessage) {\n    this.displayNameValidationState = 'has-error';\n    this.helpBlock = errorMessage;\n  }\n\n  onUpdateEmail(event) {\n    this.email = event.target.value;\n    this.emailValidationState = '';\n    this.helpBlock = '';\n  }\n\n  onUpdatePassword(event) {\n    this.password = event.target.value;\n    this.passwordValidationState = '';\n    this.helpBlock = '';\n  }\n\n  onInvalidEmail() {\n    this.emailValidationState = 'has-error';\n    this.helpBlock = 'Please enter an email.';\n  }\n\n  onInvalidPassword() {\n    this.passwordValidationState = 'has-error';\n    this.helpBlock = 'Please enter a password.';\n  }\n}\n\nexport default alt.createStore(LoginStore);\n","import React from 'react';\nimport {Link} from 'react-router';\nimport NavbarStore from './NavbarStore';\nimport NavbarActions from './NavbarActions';\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = NavbarStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    NavbarStore.listen(this.onChange);\n    NavbarActions.getCharacterCount();\n    NavbarActions.getUser();\n\n    let socket = io.connect();\n\n    socket.on('onlineUsers', (data) => {\n      NavbarActions.updateOnlineUsers(data);\n    });\n\n    $(document).ajaxStart(() => {\n      NavbarActions.updateAjaxAnimation('fadeIn');\n    });\n\n    $(document).ajaxComplete(() => {\n      setTimeout(() => {\n        NavbarActions.updateAjaxAnimation('fadeOut');\n      }, 750);\n    });\n  }\n\n  componentWillUnmount() {\n    NavbarStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    let searchQuery = this.state.searchQuery.trim();\n\n    if (searchQuery) {\n      NavbarActions.findCharacter({\n        searchQuery: searchQuery,\n        searchForm: this.refs.searchForm,\n        history: this.props.history\n      });\n    }\n  }\n\n  loggedIn(props) {\n    const isLoggedIn = this.state.isLoggedIn;\n    if (isLoggedIn) {\n      return (<ul className='nav navbar-nav' style={{\"float\": \"right\"}}>\n                <li><Link to='/profile'>{this.state.displayName}</Link></li>\n              <li><Link to='/api/logout'>Logout</Link></li>\n              </ul>);\n    }\n    return (<ul className='nav navbar-nav' style={{\"float\": \"right\"}}>\n              <li><Link to='/login'>Login</Link></li>\n              <li><Link to='/signup'>Signup</Link></li>\n          </ul>);\n  }\n\n  render() {\n    return (\n      <nav className='navbar navbar-default navbar-static-top'>\n      <div className='container'>\n        <div className='navbar-header'>\n          <button type='button' className='navbar-toggle collapsed' data-toggle='collapse' data-target='#navbar'>\n            <span className='sr-only'>Toggle navigation</span>\n            <span className='icon-bar'></span>\n            <span className='icon-bar'></span>\n            <span className='icon-bar'></span>\n          </button>\n          <Link to='/' className='navbar-brand'>\n            <span className={'triangles animated ' + this.state.ajaxAnimationClass}>\n              <div className='tri invert'></div>\n              <div className='tri invert'></div>\n              <div className='tri'></div>\n              <div className='tri invert'></div>\n              <div className='tri invert'></div>\n              <div className='tri'></div>\n              <div className='tri invert'></div>\n              <div className='tri'></div>\n              <div className='tri invert'></div>\n            </span>\n            SCNAVIS\n            <span className='badge badge-up badge-danger'>{this.state.onlineUsers}</span>\n          </Link>\n        </div>\n        <div id='navbar' className='navbar-collapse collapse'>\n          <form ref='searchForm' className='navbar-form navbar-left animated' onSubmit={this.handleSubmit.bind(this)}>\n            <div className='input-group'>\n              <input type='text' className='form-control' placeholder={this.state.totalCharacters + ' characters'} value={this.state.searchQuery} onChange={NavbarActions.updateSearchQuery} />\n              <span className='input-group-btn'>\n                <button className='btn btn-default' onClick={this.handleSubmit.bind(this)}><span className='glyphicon glyphicon-search'></span></button>\n              </span>\n            </div>\n          </form>\n          <ul className='nav navbar-nav'>\n            <li><Link to='/'>Home</Link></li>\n            <li><Link to='/users'>Users</Link></li>\n            <li><Link to='/teams'>Teams</Link></li>\n            <li><Link to='/tournaments'>Tournaments</Link></li>\n          </ul>\n            {this.loggedIn()}\n        </div>\n        </div>\n      </nav>\n    );\n  }\n\n}\n\nexport default Navbar;\n","import alt from '../alt';\nimport {assign} from 'underscore';\n\nclass NavbarActions {\n  constructor() {\n    this.generateActions(\n      'updateOnlineUsers',\n      'updateAjaxAnimation',\n      'updateSearchQuery',\n      'getCharacterCountSuccess',\n      'getCharacterCountFail',\n      'getUserSuccess',\n      'getUserFail',\n      'findCharacterSuccess',\n      'findCharacterFail'\n    );\n  }\n\n  findCharacter(payload) {\n    $.ajax({\n      url: '/api/characters/search',\n      data: { name: payload.searchQuery }\n    })\n      .done((data) => {\n        assign(payload, data);\n        this.actions.findCharacterSuccess(payload);\n      })\n      .fail(() => {\n        this.actions.findCharacterFail(payload);\n      });\n  }\n\n  getCharacterCount() {\n    $.ajax({ url: '/api/characters/count' })\n      .done((data) => {\n        this.actions.getCharacterCountSuccess(data)\n      })\n      .fail((jqXhr) => {\n        this.actions.getCharacterCountFail(jqXhr)\n      });\n  }\n\n  getUser() {\n    $.ajax({ url: '/api/profile' })\n      .done((data) => {\n        this.actions.getUserSuccess(data)\n      })\n      .fail((jqXhr) => {\n        this.actions.getUserFail(jqXhr)\n      });\n  }\n}\n\nexport default alt.createActions(NavbarActions);\n","import alt from '../alt';\nimport NavbarActions from './NavbarActions';\n\nclass NavbarStore {\n  constructor() {\n    this.bindActions(NavbarActions);\n    this.totalCharacters = 0;\n    this.onlineUsers = 0;\n    this.searchQuery = '';\n    this.ajaxAnimationClass = '';\n    this.displayName = '';\n    this.isLoggedIn = false;\n  }\n\n  onFindCharacterSuccess(payload) {\n    payload.history.pushState(null, '/characters/' + payload.characterId);\n  }\n\n  onFindCharacterFail(payload) {\n    payload.searchForm.classList.add('shake');\n    setTimeout(() => {\n      payload.searchForm.classList.remove('shake');\n    }, 1000);\n  }\n\n  onUpdateOnlineUsers(data) {\n    this.onlineUsers = data.onlineUsers;\n  }\n\n  onUpdateAjaxAnimation(className) {\n    this.ajaxAnimationClass = className; //fadein or fadeout\n  }\n\n  onUpdateSearchQuery(event) {\n    this.searchQuery = event.target.value;\n  }\n\n  onGetCharacterCountSuccess(data) {\n    this.totalCharacters = data.count;\n  }\n\n  onGetCharacterCountFail(jqXhr) {\n    toastr.error(jqXhr.responseJSON.message);\n  }\n\n  onGetUserSuccess(data) {\n    this.isLoggedIn = true;\n    //console.log(data.local);\n    this.displayName = data.local.displayName;\n  }\n\n  onGetUserFail(jqXhr) {\n    console.log(\"get user request failed\");\n  }\n}\n\nexport default alt.createStore(NavbarStore);\n","// src/components/NotFoundPage.js\nimport React from 'react';\nimport { Link } from 'react-router';\n\nexport default class NotFoundPage extends React.Component {\n  render() {\n    return (\n      <div className=\"not-found container text-center\">\n        <h1>404</h1>\n        <h2>Page not found!</h2>\n        <p>\n          <Link to=\"/\">Go back to the main page</Link>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {Link} from 'react-router';\nimport {isEqual} from 'underscore';\nimport ProfileStore from './ProfileStore';\nimport ProfileActions from './ProfileActions';\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = ProfileStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    ProfileStore.listen(this.onChange);\n    ProfileActions.getProfile();\n\n    $('.magnific-popup').magnificPopup({\n      type: 'image',\n      mainClass: 'mfp-zoom-in',\n      closeOnContentClick: true,\n      midClick: true,\n      zoom: {\n        enabled: true,\n        duration: 300\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    ProfileStore.unlisten(this.onChange);\n    $(document.body).removeClass();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.params.id !== this.props.params.id) {\n      ProfileActions.getProfile();\n    }\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  editProfile(props){\n    window.location = '/edit-profile';\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='profile-img'>\n          <a ref='magnificPopup' className='magnific-popup' href={'https://image.eveonline.com/Character/' + this.state.characterId + '_1024.jpg'}>\n            <img className='media-object' src={'/api/profilepicture/'+this.state.profilePicture} />\n          </a>\n        </div>\n        <div className='profile-info clearfix'>\n          <button onClick={this.editProfile.bind()}>Edit Profile</button>\n          <h2><strong>{this.state.displayName}</strong></h2>\n          <h4 className='lead'>Organizations: <strong>{this.state.organizations}</strong></h4>\n          <h4 className='lead'>Teams: <strong>{this.state.teams}</strong></h4>\n          <h4 className='lead'>Kills: <strong>{this.state.kills}</strong></h4>\n          <h4 className='lead'>Deaths: <strong>{this.state.deaths}</strong></h4>\n        </div>\n        <div className='profile-stats clearfix'>\n          <ul>\n            <li><span className='stats-number'>{this.state.winLossRatio}</span>Winning Percentage</li>\n            <li><span className='stats-number'>{this.state.wins}</span> Wins</li>\n            <li><span className='stats-number'>{this.state.losses}</span> Losses</li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Profile;\n","import alt from '../alt';\n\nclass ProfileActions {\n  constructor() {\n    this.generateActions(\n      'getProfileSuccess',\n      'getProfileFail'\n    );\n  }\n\n  getProfile() {\n    $.ajax({ url: '/api/profile'})\n      .done((data) => {\n        this.actions.getProfileSuccess(data);\n      })\n      .fail((jqXhr) => {\n        window.location.replace(\"/\");\n        this.actions.getProfileFail(jqXhr);\n      })\n  }\n}\n\nexport default alt.createActions(ProfileActions);\n","import {assign, contains} from 'underscore';\nimport alt from '../alt';\nimport ProfileActions from './ProfileActions';\n\nclass ProfileStore {\n  constructor() {\n    this.bindActions(ProfileActions);\n    this.id = 0;\n    this.displayName = 'TBD';\n    this.deaths = 'TBD';\n    this.kills = 'TBD';\n    this.losses = 0;\n    this.organization = [];\n    this.winLossRatio = 0;\n    this.profilePicture = '/api/profilePicture';\n  }\n\n  onGetProfileSuccess(data) {\n    assign(this, data.local);\n    this.id = data._id\n    // let localData = localStorage.getItem('NEF') ? JSON.parse(localStorage.getItem('NEF')) : {};\n    // let reports = localData.reports || [];\n    // this.isReported = contains(reports, this._id);\n    // this.winLossRatio = ((this.wins / (this.wins + this.losses) * 100) || 0).toFixed(1);\n  }\n\n  onGetProfileFail(jqXhr) {\n    toastr.error(jqXhr.responseJSON.message);\n  }\n}\n\nexport default alt.createStore(ProfileStore);\n","import React from 'react';\nimport SignupStore from './SignupStore';\nimport SignupActions from './SignupActions';\nimport {Router, browserHistory} from 'react-router';\n\n\nclass Signup extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = SignupStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    SignupStore.listen(this.onChange);\n  }\n\n  componentWillUnmount() {\n    SignupStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    var email = this.state.email.trim();\n    var displayName = this.state.displayName.trim();\n    var password = this.state.password.trim();\n\n    if (!email || !displayName || !password) {\n      SignupActions.invalidSignup();\n      //this.refs.nameTextField.getDOMNode().focus();\n    }\n\n    if (email && displayName && password) {\n      SignupActions.addUser(email, displayName, password);\n    }\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='row'>\n          <div className='col-sm-8 col-md-offset-2'>\n            <div className='panel panel-default'>\n              <div className='panel-heading'>Signup</div>\n              <div className='panel-body'>\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                  <div className={'form-group ' + this.state.emailValidationState}>\n                    <label className='control-label'>Email</label>\n                    <input type='text' className='form-control' ref='emailTextField' value={this.state.email}\n                           onChange={SignupActions.updateEmail} autoFocus/>\n                    <span className='help-block'>{this.state.helpBlock}</span>\n                  </div>\n                  <div className={'form-group ' + this.state.displayNameValidationState}>\n                    <label className='control-label'>Display Name (This will be the name that is displayed on SCNAVIS)</label>\n                    <input type='text' className='form-control' ref='displayNameTextField' value={this.state.displayName}\n                           onChange={SignupActions.updateDisplayName} autoFocus/>\n                    <span className='help-block'>{this.state.helpBlock}</span>\n                  </div>\n                  <div className={'form-group ' + this.state.passwordValidationState}>\n                    <label className='control-label'>Password</label>\n                    <input type='password' className='form-control' ref='passwordTextField' value={this.state.password}\n                           onChange={SignupActions.updatePassword} autoFocus/>\n                    <span className='help-block'>{this.state.helpBlock}</span>\n                  </div>\n                  <button type='submit' className='btn btn-primary'>Submit</button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Signup;\n","import alt from '../alt';\n\nclass SignupActions {\n  constructor() {\n    this.generateActions(\n      'signupSuccess',\n      'signupFail',\n      'updateDisplayName',\n      'updatePassword',\n      'updateEmail',\n      'invalidDisplayName',\n      'invalidPassword',\n      'invalidEmail',\n      'invalidSignup',\n    );\n  }\n\n  addUser(email, displayName, password) {\n    $.ajax({\n      type: 'POST',\n      url: '/api/signup',\n      data: { email: email, displayName:displayName, password: password}\n    })\n      .done((data) => {\n        console.log(\"success signup\")\n        window.location.replace(\"/\");\n        this.actions.signupSuccess(data.message);\n      })\n      .fail((jqXhr) => {\n        console.log(\"failed signup\")\n        this.actions.signupFail(jqXhr.responseJSON.message);\n      });\n  }\n}\n\nexport default alt.createActions(SignupActions);\n","import alt from '../alt';\nimport SignupActions from './SignupActions';\n\nclass SignupStore {\n  constructor() {\n    this.bindActions(SignupActions);\n    this.email = '';\n    this.displayName = '';\n    this.password = '';\n    this.helpBlock = '';\n    this.emailValidationState = '';\n    this.displayNameValidationState = '';\n    this.passwordValidationState = '';\n  }\n\n  onSignupSuccess(successMessage) {\n    console.log(this);\n    this.displayNameValidationState = 'has-success';\n    this.helpBlock = successMessage;\n  }\n\n  onSignupFail(errorMessage) {\n    this.displayNameValidationState = 'has-error';\n    this.helpBlock = errorMessage;\n  }\n\n  onUpdateEmail(event) {\n    this.email = event.target.value;\n    this.emailValidationState = '';\n    this.helpBlock = '';\n  }\n\n  onUpdateDisplayName(event) {\n    this.displayName = event.target.value;\n    this.displayNameValidationState = '';\n    this.helpBlock = '';\n  }\n\n  onUpdatePassword(event) {\n    this.password = event.target.value;\n    this.passwordValidationState = '';\n    this.helpBlock = '';\n  }\n\n  onUpdateEmail(event) {\n    this.email = event.target.value;\n    this.emailValidationState = '';\n    this.helpBlock = '';\n  }\n  onUpdateRsiHandle(event) {\n    this.rsiHandle = event.target.value;\n    this.rsiHandleValidationState = '';\n    this.helpBlock = '';\n  }\n\n  onInvalidEmail() {\n    this.emailValidationState = 'has-error';\n    this.helpBlock = 'Please enter an email.';\n  }\n\n  onInvalidDisplayName() {\n    this.displayNameValidationState = 'has-error';\n    this.helpBlock = 'Please enter a character name.';\n  }\n\n  onInvalidPassword() {\n    this.passwordValidationState = 'has-error';\n    this.helpBlock = 'Please enter a password.';\n  }\n\n  onInvalidSignup() {\n    this.helpBlock = 'Ensure each field is filled out'\n  }\n}\n\nexport default alt.createStore(SignupStore);\n","import React from 'react';\nimport {Link} from 'react-router';\nimport {isEqual} from 'underscore';\nimport UserListStore from './UserListStore';\nimport UserListActions from './UserListActions';\n\nclass UserList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = UserListStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n    componentDidMount() {\n    UserListStore.listen(this.onChange);\n    UserListActions.getUsers(this.props.params);\n  }\n\n  componentWillUnmount() {\n    UserListStore.unlisten(this.onChange);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.params, this.props.params)) {\n      UserListActions.getUsers(this.props.params);\n    }\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  render() {\n    let usersList = this.state.users.map((user, index) => {\n      return (\n        <div key={user.local.displayName} className='list-group-item animated fadeIn'>\n          <div className='media'>\n            <span className='position pull-left'>{index + 1}</span>\n            <div className='pull-left thumb-lg'>\n              <Link to={'/users/' + user._id}>\n                <img className='media-object' src={'/api/profilepicture/' + user.local.profilePicture} />\n              </Link>\n            </div>\n            <div className='media-body'>\n              <h4 className='media-heading'>\n                <Link to={'/users/' + user.local.displayName}>{user.local.displayName}</Link>\n              </h4>\n              <br />\n              <small>Teams: <strong>{user.local.teams}</strong></small>\n              <br />\n              <small>Organizations: <strong>{user.local.organizations}</strong></small>\n              <br />\n              <small>Wins: <strong>{user.local.wins}</strong> Losses: <strong>{user.local.losses}</strong></small>\n            </div>\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div className='container'>\n        <div className='list-group'>\n          {usersList}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserList;\n","import alt from '../alt';\n\nclass UserListActions {\n  constructor() {\n    this.generateActions(\n      'getUsersSuccess',\n      'getUsersFail'\n    );\n  }\n\n  getUsers(payload) {\n    let url = '/api/users';\n    let params = {\n    };\n    $.ajax({ url: url, data: params })\n      .done((data) => {\n        this.actions.getUsersSuccess(data);\n      })\n      .fail((jqXhr) => {\n        this.actions.getUsersFail(jqXhr);\n      });\n  }\n}\n\nexport default alt.createActions(UserListActions);\n","import alt from '../alt';\nimport UserListActions from './UserListActions';\n\nclass UserListStore {\n  constructor() {\n    this.bindActions(UserListActions);\n    this.users = [];\n  }\n\n  onGetUsersSuccess(data) {\n    this.users = data;\n  }\n\n  onGetUsersFail(jqXhr) {\n    toastr.error(jqXhr.responseJSON.message);\n  }\n}\n\nexport default alt.createStore(UserListStore);\n","import Alt from 'alt';\n\nexport default new Alt();\n","import React from 'react';\nimport Router from 'react-router';\nimport ReactDOM from 'react-dom';\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\nimport routes from './routes';\nimport Navbar from './Navbar/Navbar';\n\nlet history = createBrowserHistory();\n\nReactDOM.render(<Router history={history}>{routes}</Router>, document.getElementById('app'));\n","import React from 'react';\nimport { Router, Route, browserHistory, IndexRoute } from 'react-router'\nimport App from './App/App';\nimport Home from './Home/Home';\nimport UserList from './UserList/UserList';\nimport Signup from './Signup/Signup';\nimport Login from './Login/Login';\nimport EditProfile from './EditProfile/EditProfile'\nimport Profile from './Profile/Profile';\nimport NotFoundPage from './NotFoundPage/NotFoundPage';\n\nexport default (\n  <Router history={browserHistory}>\n    <Route component={App}>\n      <Route path='/' component={Home} />\n      <Route path='/users' component={UserList} />\n      <Route path='/profile' component={Profile} />\n      <Route path='/signup' component={Signup} />\n      <Route path='/login' component={Login} />\n      <Route path='/edit-profile' component={EditProfile} />\n      <Route path=\"*\" component={NotFoundPage}/>\n    </Route>\n  </Router>\n);\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Dropzone\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"Dropzone\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _attrAccept = __webpack_require__(2);\n\t\n\tvar _attrAccept2 = _interopRequireDefault(_attrAccept);\n\t\n\tvar _getDataTransferItems = __webpack_require__(3);\n\t\n\tvar _getDataTransferItems2 = _interopRequireDefault(_getDataTransferItems);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint prefer-template: 0 */\n\t\n\t\n\tvar supportMultiple = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;\n\t\n\tvar Dropzone = function (_React$Component) {\n\t  _inherits(Dropzone, _React$Component);\n\t\n\t  _createClass(Dropzone, null, [{\n\t    key: 'onDocumentDragOver',\n\t    value: function onDocumentDragOver(e) {\n\t      // allow the entire document to be a drag target\n\t      e.preventDefault();\n\t    }\n\t  }]);\n\t\n\t  function Dropzone(props, context) {\n\t    _classCallCheck(this, Dropzone);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call(this, props, context));\n\t\n\t    _this.renderChildren = function (children) {\n\t      if (typeof children === 'function') {\n\t        return children(_this.state);\n\t      }\n\t      return children;\n\t    };\n\t\n\t    _this.onClick = _this.onClick.bind(_this);\n\t    _this.onDocumentDrop = _this.onDocumentDrop.bind(_this);\n\t    _this.onDragStart = _this.onDragStart.bind(_this);\n\t    _this.onDragEnter = _this.onDragEnter.bind(_this);\n\t    _this.onDragLeave = _this.onDragLeave.bind(_this);\n\t    _this.onDragOver = _this.onDragOver.bind(_this);\n\t    _this.onDrop = _this.onDrop.bind(_this);\n\t    _this.onFileDialogCancel = _this.onFileDialogCancel.bind(_this);\n\t    _this.fileAccepted = _this.fileAccepted.bind(_this);\n\t    _this.setRef = _this.setRef.bind(_this);\n\t    _this.isFileDialogActive = false;\n\t    _this.state = {\n\t      isDragActive: false,\n\t      acceptedFiles: [],\n\t      rejectedFiles: []\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Dropzone, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var preventDropOnDocument = this.props.preventDropOnDocument;\n\t\n\t      this.dragTargets = [];\n\t\n\t      if (preventDropOnDocument) {\n\t        document.addEventListener('dragover', Dropzone.onDocumentDragOver, false);\n\t        document.addEventListener('drop', this.onDocumentDrop, false);\n\t      }\n\t      // Tried implementing addEventListener, but didn't work out\n\t      document.body.onfocus = this.onFileDialogCancel;\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      var preventDropOnDocument = this.props.preventDropOnDocument;\n\t\n\t      if (preventDropOnDocument) {\n\t        document.removeEventListener('dragover', Dropzone.onDocumentDragOver);\n\t        document.removeEventListener('drop', this.onDocumentDrop);\n\t      }\n\t      // Can be replaced with removeEventListener, if addEventListener works\n\t      document.body.onfocus = null;\n\t    }\n\t  }, {\n\t    key: 'onDocumentDrop',\n\t    value: function onDocumentDrop(e) {\n\t      if (this.node.contains(e.target)) {\n\t        // if we intercepted an event for our instance, let it propagate down to the instance's onDrop handler\n\t        return;\n\t      }\n\t      e.preventDefault();\n\t      this.dragTargets = [];\n\t    }\n\t  }, {\n\t    key: 'onDragStart',\n\t    value: function onDragStart(e) {\n\t      if (this.props.onDragStart) {\n\t        this.props.onDragStart.call(this, e);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onDragEnter',\n\t    value: function onDragEnter(e) {\n\t      e.preventDefault();\n\t\n\t      // Count the dropzone and any children that are entered.\n\t      if (this.dragTargets.indexOf(e.target) === -1) {\n\t        this.dragTargets.push(e.target);\n\t      }\n\t\n\t      var allFilesAccepted = this.allFilesAccepted((0, _getDataTransferItems2.default)(e, this.props.multiple));\n\t\n\t      this.setState({\n\t        isDragActive: allFilesAccepted,\n\t        isDragReject: !allFilesAccepted\n\t      });\n\t\n\t      if (this.props.onDragEnter) {\n\t        this.props.onDragEnter.call(this, e);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onDragOver',\n\t    value: function onDragOver(e) {\n\t      // eslint-disable-line class-methods-use-this\n\t      e.preventDefault();\n\t      e.stopPropagation();\n\t      try {\n\t        e.dataTransfer.dropEffect = 'copy'; // eslint-disable-line no-param-reassign\n\t      } catch (err) {\n\t        // continue regardless of error\n\t      }\n\t\n\t      if (this.props.onDragOver) {\n\t        this.props.onDragOver.call(this, e);\n\t      }\n\t      return false;\n\t    }\n\t  }, {\n\t    key: 'onDragLeave',\n\t    value: function onDragLeave(e) {\n\t      var _this2 = this;\n\t\n\t      e.preventDefault();\n\t\n\t      // Only deactivate once the dropzone and all children have been left.\n\t      this.dragTargets = this.dragTargets.filter(function (el) {\n\t        return el !== e.target && _this2.node.contains(el);\n\t      });\n\t      if (this.dragTargets.length > 0) {\n\t        return;\n\t      }\n\t\n\t      this.setState({\n\t        isDragActive: false,\n\t        isDragReject: false\n\t      });\n\t\n\t      if (this.props.onDragLeave) {\n\t        this.props.onDragLeave.call(this, e);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onDrop',\n\t    value: function onDrop(e) {\n\t      var _this3 = this;\n\t\n\t      var _props = this.props,\n\t          onDrop = _props.onDrop,\n\t          onDropAccepted = _props.onDropAccepted,\n\t          onDropRejected = _props.onDropRejected,\n\t          multiple = _props.multiple,\n\t          disablePreview = _props.disablePreview;\n\t\n\t      var fileList = (0, _getDataTransferItems2.default)(e, multiple);\n\t      var acceptedFiles = [];\n\t      var rejectedFiles = [];\n\t\n\t      // Stop default browser behavior\n\t      e.preventDefault();\n\t\n\t      // Reset the counter along with the drag on a drop.\n\t      this.dragTargets = [];\n\t      this.isFileDialogActive = false;\n\t\n\t      fileList.forEach(function (file) {\n\t        if (!disablePreview) {\n\t          file.preview = window.URL.createObjectURL(file); // eslint-disable-line no-param-reassign\n\t        }\n\t\n\t        if (_this3.fileAccepted(file) && _this3.fileMatchSize(file)) {\n\t          acceptedFiles.push(file);\n\t        } else {\n\t          rejectedFiles.push(file);\n\t        }\n\t      });\n\t\n\t      if (onDrop) {\n\t        onDrop.call(this, acceptedFiles, rejectedFiles, e);\n\t      }\n\t\n\t      if (rejectedFiles.length > 0 && onDropRejected) {\n\t        onDropRejected.call(this, rejectedFiles, e);\n\t      }\n\t\n\t      if (acceptedFiles.length > 0 && onDropAccepted) {\n\t        onDropAccepted.call(this, acceptedFiles, e);\n\t      }\n\t\n\t      // Reset drag state\n\t      this.setState({\n\t        isDragActive: false,\n\t        isDragReject: false,\n\t        acceptedFiles: acceptedFiles,\n\t        rejectedFiles: rejectedFiles\n\t      });\n\t    }\n\t  }, {\n\t    key: 'onClick',\n\t    value: function onClick(e) {\n\t      var _props2 = this.props,\n\t          onClick = _props2.onClick,\n\t          disableClick = _props2.disableClick;\n\t\n\t      if (!disableClick) {\n\t        e.stopPropagation();\n\t        this.open();\n\t        if (onClick) {\n\t          onClick.call(this, e);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onFileDialogCancel',\n\t    value: function onFileDialogCancel() {\n\t      // timeout will not recognize context of this method\n\t      var onFileDialogCancel = this.props.onFileDialogCancel;\n\t      var fileInputEl = this.fileInputEl;\n\t      var isFileDialogActive = this.isFileDialogActive;\n\t      // execute the timeout only if the onFileDialogCancel is defined and FileDialog\n\t      // is opened in the browser\n\t\n\t      if (onFileDialogCancel && isFileDialogActive) {\n\t        setTimeout(function () {\n\t          // Returns an object as FileList\n\t          var FileList = fileInputEl.files;\n\t          if (!FileList.length) {\n\t            isFileDialogActive = false;\n\t            onFileDialogCancel();\n\t          }\n\t        }, 300);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setRef',\n\t    value: function setRef(ref) {\n\t      this.node = ref;\n\t    }\n\t  }, {\n\t    key: 'fileAccepted',\n\t    value: function fileAccepted(file) {\n\t      // Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with\n\t      // that MIME type will always be accepted\n\t      return file.type === 'application/x-moz-file' || (0, _attrAccept2.default)(file, this.props.accept);\n\t    }\n\t  }, {\n\t    key: 'fileMatchSize',\n\t    value: function fileMatchSize(file) {\n\t      return file.size <= this.props.maxSize && file.size >= this.props.minSize;\n\t    }\n\t  }, {\n\t    key: 'allFilesAccepted',\n\t    value: function allFilesAccepted(files) {\n\t      return files.every(this.fileAccepted);\n\t    }\n\t  }, {\n\t    key: 'open',\n\t    value: function open() {\n\t      this.isFileDialogActive = true;\n\t      this.fileInputEl.value = null;\n\t      this.fileInputEl.click();\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this4 = this;\n\t\n\t      var _props3 = this.props,\n\t          accept = _props3.accept,\n\t          activeClassName = _props3.activeClassName,\n\t          inputProps = _props3.inputProps,\n\t          multiple = _props3.multiple,\n\t          name = _props3.name,\n\t          rejectClassName = _props3.rejectClassName,\n\t          children = _props3.children,\n\t          rest = _objectWithoutProperties(_props3, ['accept', 'activeClassName', 'inputProps', 'multiple', 'name', 'rejectClassName', 'children']);\n\t\n\t      var activeStyle = rest.activeStyle,\n\t          className = rest.className,\n\t          rejectStyle = rest.rejectStyle,\n\t          style = rest.style,\n\t          props = _objectWithoutProperties(rest, ['activeStyle', 'className', 'rejectStyle', 'style']);\n\t\n\t      var _state = this.state,\n\t          isDragActive = _state.isDragActive,\n\t          isDragReject = _state.isDragReject;\n\t\n\t\n\t      className = className || '';\n\t\n\t      if (isDragActive && activeClassName) {\n\t        className += ' ' + activeClassName;\n\t      }\n\t      if (isDragReject && rejectClassName) {\n\t        className += ' ' + rejectClassName;\n\t      }\n\t\n\t      if (!className && !style && !activeStyle && !rejectStyle) {\n\t        style = {\n\t          width: 200,\n\t          height: 200,\n\t          borderWidth: 2,\n\t          borderColor: '#666',\n\t          borderStyle: 'dashed',\n\t          borderRadius: 5\n\t        };\n\t        activeStyle = {\n\t          borderStyle: 'solid',\n\t          backgroundColor: '#eee'\n\t        };\n\t        rejectStyle = {\n\t          borderStyle: 'solid',\n\t          backgroundColor: '#ffdddd'\n\t        };\n\t      }\n\t\n\t      var appliedStyle = void 0;\n\t      if (activeStyle && isDragActive) {\n\t        appliedStyle = _extends({}, style, activeStyle);\n\t      } else if (rejectStyle && isDragReject) {\n\t        appliedStyle = _extends({}, style, rejectStyle);\n\t      } else {\n\t        appliedStyle = _extends({}, style);\n\t      }\n\t\n\t      var inputAttributes = {\n\t        accept: accept,\n\t        type: 'file',\n\t        style: { display: 'none' },\n\t        multiple: supportMultiple && multiple,\n\t        ref: function ref(el) {\n\t          return _this4.fileInputEl = el;\n\t        }, // eslint-disable-line\n\t        onChange: this.onDrop\n\t      };\n\t\n\t      if (name && name.length) {\n\t        inputAttributes.name = name;\n\t      }\n\t\n\t      // Remove custom properties before passing them to the wrapper div element\n\t      var customProps = ['acceptedFiles', 'preventDropOnDocument', 'disablePreview', 'disableClick', 'onDropAccepted', 'onDropRejected', 'onFileDialogCancel', 'maxSize', 'minSize'];\n\t      var divProps = _extends({}, props);\n\t      customProps.forEach(function (prop) {\n\t        return delete divProps[prop];\n\t      });\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        _extends({\n\t          className: className,\n\t          style: appliedStyle\n\t        }, divProps /* expand user provided props first so event handlers are never overridden */, {\n\t          onClick: this.onClick,\n\t          onDragStart: this.onDragStart,\n\t          onDragEnter: this.onDragEnter,\n\t          onDragOver: this.onDragOver,\n\t          onDragLeave: this.onDragLeave,\n\t          onDrop: this.onDrop,\n\t          ref: this.setRef\n\t        }),\n\t        this.renderChildren(children),\n\t        _react2.default.createElement('input', _extends({}, inputProps /* expand user provided inputProps first so inputAttributes override them */, inputAttributes))\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Dropzone;\n\t}(_react2.default.Component);\n\t\n\tDropzone.defaultProps = {\n\t  preventDropOnDocument: true,\n\t  disablePreview: false,\n\t  disableClick: false,\n\t  multiple: true,\n\t  maxSize: Infinity,\n\t  minSize: 0\n\t};\n\t\n\tDropzone.propTypes = {\n\t  onClick: _react2.default.PropTypes.func,\n\t  onDrop: _react2.default.PropTypes.func,\n\t  onDropAccepted: _react2.default.PropTypes.func,\n\t  onDropRejected: _react2.default.PropTypes.func,\n\t  onDragStart: _react2.default.PropTypes.func,\n\t  onDragEnter: _react2.default.PropTypes.func,\n\t  onDragOver: _react2.default.PropTypes.func,\n\t  onDragLeave: _react2.default.PropTypes.func,\n\t\n\t  children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.node, _react2.default.PropTypes.func]), // Contents of the dropzone\n\t  style: _react2.default.PropTypes.object, // CSS styles to apply\n\t  activeStyle: _react2.default.PropTypes.object, // CSS styles to apply when drop will be accepted\n\t  rejectStyle: _react2.default.PropTypes.object, // CSS styles to apply when drop will be rejected\n\t  className: _react2.default.PropTypes.string, // Optional className\n\t  activeClassName: _react2.default.PropTypes.string, // className for accepted state\n\t  rejectClassName: _react2.default.PropTypes.string, // className for rejected state\n\t\n\t  preventDropOnDocument: _react2.default.PropTypes.bool, // If false, allow dropped items to take over the current browser window\n\t  disablePreview: _react2.default.PropTypes.bool, // Enable/disable preview generation\n\t  disableClick: _react2.default.PropTypes.bool, // Disallow clicking on the dropzone container to open file dialog\n\t  onFileDialogCancel: _react2.default.PropTypes.func, // Provide a callback on clicking the cancel button of the file dialog\n\t\n\t  inputProps: _react2.default.PropTypes.object, // Pass additional attributes to the <input type=\"file\"/> tag\n\t  multiple: _react2.default.PropTypes.bool, // Allow dropping multiple files\n\t  accept: _react2.default.PropTypes.string, // Allow specific types of files. See https://github.com/okonet/attr-accept for more information\n\t  name: _react2.default.PropTypes.string, // name attribute for the input tag\n\t  maxSize: _react2.default.PropTypes.number,\n\t  minSize: _react2.default.PropTypes.number\n\t};\n\t\n\texports.default = Dropzone;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports=function(t){function n(e){if(r[e])return r[e].exports;var o=r[e]={exports:{},id:e,loaded:!1};return t[e].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var r={};return n.m=t,n.c=r,n.p=\"\",n(0)}([function(t,n,r){\"use strict\";n.__esModule=!0,r(8),r(9),n[\"default\"]=function(t,n){if(t&&n){var r=function(){var r=Array.isArray(n)?n:n.split(\",\"),e=t.name||\"\",o=t.type||\"\",i=o.replace(/\\/.*$/,\"\");return{v:r.some(function(t){var n=t.trim();return\".\"===n.charAt(0)?e.toLowerCase().endsWith(n.toLowerCase()):/\\/\\*$/.test(n)?i===n.replace(/\\/.*$/,\"\"):o===n})}}();if(\"object\"==typeof r)return r.v}return!0},t.exports=n[\"default\"]},function(t,n){var r=t.exports={version:\"1.2.2\"};\"number\"==typeof __e&&(__e=r)},function(t,n){var r=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=r)},function(t,n,r){var e=r(2),o=r(1),i=r(4),u=r(19),c=\"prototype\",f=function(t,n){return function(){return t.apply(n,arguments)}},s=function(t,n,r){var a,p,l,y,d=t&s.G,h=t&s.P,v=d?e:t&s.S?e[n]||(e[n]={}):(e[n]||{})[c],x=d?o:o[n]||(o[n]={});d&&(r=n);for(a in r)p=!(t&s.F)&&v&&a in v,l=(p?v:r)[a],y=t&s.B&&p?f(l,e):h&&\"function\"==typeof l?f(Function.call,l):l,v&&!p&&u(v,a,l),x[a]!=l&&i(x,a,y),h&&((x[c]||(x[c]={}))[a]=l)};e.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,t.exports=s},function(t,n,r){var e=r(5),o=r(18);t.exports=r(22)?function(t,n,r){return e.setDesc(t,n,o(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n){var r=Object;t.exports={create:r.create,getProto:r.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:r.getOwnPropertyDescriptor,setDesc:r.defineProperty,setDescs:r.defineProperties,getKeys:r.keys,getNames:r.getOwnPropertyNames,getSymbols:r.getOwnPropertySymbols,each:[].forEach}},function(t,n){var r=0,e=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++r+e).toString(36))}},function(t,n,r){var e=r(20)(\"wks\"),o=r(2).Symbol;t.exports=function(t){return e[t]||(e[t]=o&&o[t]||(o||r(6))(\"Symbol.\"+t))}},function(t,n,r){r(26),t.exports=r(1).Array.some},function(t,n,r){r(25),t.exports=r(1).String.endsWith},function(t,n){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n,r){var e=r(10);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,n,r){t.exports=function(t){var n=/./;try{\"/./\"[t](n)}catch(e){try{return n[r(7)(\"match\")]=!1,!\"/./\"[t](n)}catch(o){}}return!0}},function(t,n){t.exports=function(t){try{return!!t()}catch(n){return!0}}},function(t,n){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,n,r){var e=r(16),o=r(11),i=r(7)(\"match\");t.exports=function(t){var n;return e(t)&&(void 0!==(n=t[i])?!!n:\"RegExp\"==o(t))}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n,r){var e=r(2),o=r(4),i=r(6)(\"src\"),u=\"toString\",c=Function[u],f=(\"\"+c).split(u);r(1).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,r,u){\"function\"==typeof r&&(o(r,i,t[n]?\"\"+t[n]:f.join(String(n))),\"name\"in r||(r.name=n)),t===e?t[n]=r:(u||delete t[n],o(t,n,r))})(Function.prototype,u,function(){return\"function\"==typeof this&&this[i]||c.call(this)})},function(t,n,r){var e=r(2),o=\"__core-js_shared__\",i=e[o]||(e[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,n,r){var e=r(17),o=r(13);t.exports=function(t,n,r){if(e(n))throw TypeError(\"String#\"+r+\" doesn't accept regex!\");return String(o(t))}},function(t,n,r){t.exports=!r(15)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n,r){var e=r(23),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},function(t,n,r){\"use strict\";var e=r(3),o=r(24),i=r(21),u=\"endsWith\",c=\"\"[u];e(e.P+e.F*r(14)(u),\"String\",{endsWith:function(t){var n=i(this,t,u),r=arguments,e=r.length>1?r[1]:void 0,f=o(n.length),s=void 0===e?f:Math.min(o(e),f),a=String(t);return c?c.call(n,a,s):n.slice(s-a.length,s)===a}})},function(t,n,r){var e=r(5),o=r(3),i=r(1).Array||Array,u={},c=function(t,n){e.each.call(t.split(\",\"),function(t){void 0==n&&t in i?u[t]=i[t]:t in[]&&(u[t]=r(12)(Function.call,[][t],n))})};c(\"pop,reverse,shift,keys,values,entries\",1),c(\"indexOf,every,some,forEach,map,filter,find,findIndex,includes\",3),c(\"join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill\"),o(o.S,\"Array\",u)}]);\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = getDataTransferFiles;\n\tfunction getDataTransferFiles(event) {\n\t  var isMultipleAllowed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t  var dataTransferItemsList = [];\n\t  if (event.dataTransfer) {\n\t    var dt = event.dataTransfer;\n\t    if (dt.files && dt.files.length) {\n\t      dataTransferItemsList = dt.files;\n\t    } else if (dt.items && dt.items.length) {\n\t      // During the drag even the dataTransfer.files is null\n\t      // but Chrome implements some drag store, which is accesible via dataTransfer.items\n\t      dataTransferItemsList = dt.items;\n\t    }\n\t  } else if (event.target && event.target.files) {\n\t    dataTransferItemsList = event.target.files;\n\t  }\n\t\n\t  if (dataTransferItemsList.length > 0) {\n\t    dataTransferItemsList = isMultipleAllowed ? dataTransferItemsList : [dataTransferItemsList[0]];\n\t  }\n\t\n\t  // Convert from DataTransferItemsList to the native Array\n\t  return Array.prototype.slice.call(dataTransferItemsList);\n\t}\n\tmodule.exports = exports[\"default\"];\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=index.js.map","/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  console.warn(\"Using browser-only version of superagent in non-browser environment\");\n  root = this;\n}\n\nvar Emitter = require('component-emitter');\nvar RequestBase = require('./request-base');\nvar isObject = require('./is-object');\nvar isFunction = require('./is-function');\nvar ResponseBase = require('./response-base');\nvar shouldRetry = require('./should-retry');\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = exports = module.exports = function(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n}\n\nexports.Request = Request;\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  throw Error(\"Browser-only verison of superagent could not find XHR\");\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    pushEncodedKeyValuePair(pairs, key, obj[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (val != null) {\n    if (Array.isArray(val)) {\n      val.forEach(function(v) {\n        pushEncodedKeyValuePair(pairs, key, v);\n      });\n    } else if (isObject(val)) {\n      for(var subkey in val) {\n        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n      }\n    } else {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(val));\n    }\n  } else if (val === null) {\n    pairs.push(encodeURIComponent(key));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req) {\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  var status = this.xhr.status;\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n      status = 204;\n  }\n  this._setStatusProperties(status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n\n  if (null === this.text && req._responseType) {\n    this.body = this.xhr.response;\n  } else {\n    this.body = this.req.method != 'HEAD'\n      ? this._parseBody(this.text ? this.text : this.xhr.response)\n      : null;\n  }\n}\n\nResponseBase(Response.prototype);\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str){\n  var parse = request.parse[this.type];\n  if(this.req._parser) {\n    return this.req._parser(this, str);\n  }\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      if (self.xhr) {\n        // ie9 doesn't have 'response' property\n        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;\n        // issue #876: return the http status code if the response parsing fails\n        err.status = self.xhr.status ? self.xhr.status : null;\n        err.statusCode = err.status; // backwards-compat only\n      } else {\n        err.rawResponse = null;\n        err.status = null;\n      }\n\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    var new_err;\n    try {\n      if (!self._isResponseOK(res)) {\n        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n        new_err.original = err;\n        new_err.response = res;\n        new_err.status = res.status;\n      }\n    } catch(e) {\n      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_err) {\n      self.callback(new_err, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `RequestBase`.\n */\n\nEmitter(Request.prototype);\nRequestBase(Request.prototype);\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} [pass] optional in case of using 'bearer' as type\n * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (typeof pass === 'object' && pass !== null) { // pass is optional and can substitute for options\n    options = pass;\n  }\n  if (!options) {\n    options = {\n      type: 'function' === typeof btoa ? 'basic' : 'auto',\n    }\n  }\n\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', 'Basic ' + btoa(user + ':' + pass));\n    break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n    break;\n      \n    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', 'Bearer ' + user);\n    break;  \n  }\n  return this;\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, options){\n  if (file) {\n    if (this._data) {\n      throw Error(\"superagent can't mix .send() and .attach()\");\n    }\n\n    this._getFormData().append(field, file, options || file.name);\n  }\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  // console.log(this._retries, this._maxRetries)\n  if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {\n    return this._retry();\n  }\n\n  var fn = this._callback;\n  this.clearTimeout();\n\n  if (err) {\n    if (this._maxRetries) err.retries = this._retries - 1;\n    this.emit('error', err);\n  }\n\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n// This only warns, because the request is still likely to work\nRequest.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){\n  console.warn(\"This is not supported in browser version of superagent\");\n  return this;\n};\n\n// This throws, because it can't send/receive data as expected\nRequest.prototype.pipe = Request.prototype.write = function(){\n  throw Error(\"Streaming is not supported in browser version of superagent\");\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\n\nRequest.prototype._appendQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;\n  }\n\n  if (this._sort) {\n    var index = this.url.indexOf('?');\n    if (index >= 0) {\n      var queryArr = this.url.substring(index + 1).split('&');\n      if (isFunction(this._sort)) {\n        queryArr.sort(this._sort);\n      } else {\n        queryArr.sort();\n      }\n      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');\n    }\n  }\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nRequest.prototype._isHost = function _isHost(obj) {\n  // Native objects stringify to [object File], [object Blob], [object FormData], etc.\n  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';\n}\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  if (this._endCalled) {\n    console.warn(\"Warning: .end() was called twice. This is not supported in superagent\");\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // querystring\n  this._appendQueryString();\n\n  return this._end();\n};\n\nRequest.prototype._end = function() {\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n  var data = this._formData || this._data;\n\n  this._setTimeouts();\n\n  // state change\n  xhr.onreadystatechange = function(){\n    var readyState = xhr.readyState;\n    if (readyState >= 2 && self._responseTimeoutTimer) {\n      clearTimeout(self._responseTimeoutTimer);\n    }\n    if (4 != readyState) {\n      return;\n    }\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (!status) {\n      if (self.timedout || self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(direction, e) {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = direction;\n    self.emit('progress', e);\n  }\n  if (this.hasListeners('progress')) {\n    try {\n      xhr.onprogress = handleProgress.bind(null, 'download');\n      if (xhr.upload) {\n        xhr.upload.onprogress = handleProgress.bind(null, 'upload');\n      }\n    } catch(e) {\n      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n      // Reported here:\n      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n  }\n\n  // initiate request\n  try {\n    if (this.username && this.password) {\n      xhr.open(this.method, this.url, true, this.username, this.password);\n    } else {\n      xhr.open(this.method, this.url, true);\n    }\n  } catch (err) {\n    // see #1149\n    return this.callback(err);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) {\n      serialize = request.serialize['application/json'];\n    }\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n\n    if (this.header.hasOwnProperty(field))\n      xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn){\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, data, fn){\n  var req = request('DELETE', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n","/**\n * Check if `fn` is a function.\n *\n * @param {Function} fn\n * @return {Boolean}\n * @api private\n */\nvar isObject = require('./is-object');\n\nfunction isFunction(fn) {\n  var tag = isObject(fn) ? Object.prototype.toString.call(fn) : '';\n  return tag === '[object Function]';\n}\n\nmodule.exports = isFunction;\n","/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n","/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = require('./is-object');\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in RequestBase.prototype) {\n    obj[key] = RequestBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function _clearTimeout(){\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, read, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function timeout(options){\n  if (!options || 'object' !== typeof options) {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    return this;\n  }\n\n  for(var option in options) {\n    switch(option) {\n      case 'deadline':\n        this._timeout = options.deadline;\n        break;\n      case 'response':\n        this._responseTimeout = options.response;\n        break;\n      default:\n        console.warn(\"Unknown timeout option\", option);\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function retry(count){\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  return this;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function() {\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    if (this._endCalled) {\n      console.warn(\"Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises\");\n    }\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){\n      self.end(function(err, res){\n        if (err) innerReject(err); else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n}\n\nRequestBase.prototype.catch = function(cb) {\n  return this.then(undefined, cb);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function use(fn) {\n  fn(this);\n  return this;\n}\n\nRequestBase.prototype.ok = function(cb) {\n  if ('function' !== typeof cb) throw Error(\"Callback required\");\n  this._okCallback = cb;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function(res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nRequestBase.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function(name, val) {\n\n  // name should be either a string or an object.\n  if (null === name ||  undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    console.error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject(name)) {\n    for (var key in name) {\n      this.field(key, name[key]);\n    }\n    return this;\n  }\n\n  if (Array.isArray(val)) {\n    for (var i in val) {\n      this.field(name, val[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (null === val || undefined === val) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if ('boolean' === typeof val) {\n    val = '' + val;\n  }\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nRequestBase.prototype.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function(on){\n  // This is browser-only functionality. Node side is no-op.\n  if(on==undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function(){\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header\n  };\n};\n\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.send = function(data){\n  var isObj = isObject(data);\n  var type = this._header['content-type'];\n\n  if (this._formData) {\n    console.error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObj && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObj || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function(sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function(reason, timeout, errno){\n  if (this._aborted) {\n    return;\n  }\n  var err = new Error(reason + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  err.code = 'ECONNABORTED';\n  err.errno = errno;\n  this.timedout = true;\n  this.abort();\n  this.callback(err);\n};\n\nRequestBase.prototype._setTimeouts = function() {\n  var self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(function(){\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n}\n","\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field){\n    return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n};\n","var ERROR_CODES = [\n  'ECONNRESET',\n  'ETIMEDOUT',\n  'EADDRINFO',\n  'ESOCKETTIMEDOUT'\n];\n\n/**\n * Determine if a request should be retried.\n * (Borrowed from segmentio/superagent-retry)\n *\n * @param {Error} err\n * @param {Response} [res]\n * @returns {Boolean}\n */\nmodule.exports = function shouldRetry(err, res) {\n  if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;\n  if (res && res.status && res.status >= 500) return true;\n  // Superagent timeout\n  if (err && 'timeout' in err && err.code == 'ECONNABORTED') return true;\n  if (err && 'crossDomain' in err) return true;\n  return false;\n};\n","\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = function(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */);\n    var key = parts.shift();\n    var val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function(str){\n  return str.split(/ *, */).reduce(function(obj, str){\n    var parts = str.split(/ *; */);\n    var url = parts[0].slice(1, -1);\n    var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n    return obj;\n  }, {});\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function(header, shouldStripCookie){\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['host'];\n  if (shouldStripCookie) {\n    delete header['cookie'];\n  }\n  return header;\n};","\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}